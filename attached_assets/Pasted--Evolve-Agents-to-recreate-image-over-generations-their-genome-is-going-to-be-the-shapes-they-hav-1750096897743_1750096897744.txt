'''
Evolve Agents to recreate image over generations
their genome is going to be the shapes they have
the fitness is going to be the mean squared error from the target image (lower is better)

Initially:
Parent genome is blank list of mutations , the fitness is then calculated 

Repeat: 
create child agents from adding random circle to parent genome 
calculate fitness of child agents
if child fitness is better than parent fitness, change parent genome to best child genome 
'''
import numpy as np
import random
from Circle import Circle
import cv2 
import matplotlib.pyplot as plt

#return rand circle
def mutate(genome, img_width, img_height):
  #TODO tinker with ranges of diff mutation types to see what works best
  color = (random.random(), random.random(), random.random(), random.random())
  pos = (random.randrange(0, img_width), random.randrange(0, img_height))
  radius = random.randrange(0, img_width)
  return genome + [Circle(pos, radius, color)]

def load_image_cv2(filename):
  img = cv2.imread(filename)
  colored_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
  img_array = np.array(colored_img)
  return img_array
  
def show_image_array (img): 
  plt.imshow(img)
  plt.show(block=False)

def show_genome(genome, width , height ):
  img = np.zeros((height, width, 3), dtype=np.float32)
  for circle in genome:
    cv2.circle(img, circle.pos, circle.radius, circle.color, thickness=-1)
  show_image_array(img)




parent_genome = []
target_img = load_image_cv2("target2.png")  #h w c , black image (based on picture might be better to start with white)
parent_fit = 1000000000000000000000  #TEMP VAL

height, width = target_img.shape[:2]
pop_size = 1000



while True:
  #create rand circles and add to parent genome
  children = [mutate(parent_genome, width, height) for i in range(pop_size)]

  #calc the fitness of each child
  # to do so draw each childs genome onto blank canvas and record their fitness
  #each time blending the circle based on the alpha value
  # children_fitnesses =[ ]
  #the max child becomes the new parent 
  for child in children:
    child_img = np.zeros((height, width, 3), dtype=np.float32)
    # could always make my own function to blend circles that is more efficient but this is fine for now 
    for circle in child:
      cv2.circle(child_img, circle.pos, circle.radius, circle.color, thickness=-1)

    #now have to calc fitness through mean squared error 
    child_fit = np.mean(( child_img - target_img ) ** 2)
    #children_fitnesses.append(child_fit)
    if child_fit < parent_fit:
      parent_fit = child_fit
      parent_genome = child

  print("Best Fit of generation: " ,parent_fit)
  show_genome(parent_genome, width, height)
  
